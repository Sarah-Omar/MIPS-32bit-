`timescale 1ns/1ps

module MIPS_Processor_tb;
    reg clk, reset;
    reg [31:0] pc_in;
    
    wire [31:0] pc_out, instruction, reg_data1, reg_data2;
    wire [31:0] alu_result, mem_data, write_data, sign_extend, branch_target, alu_src_mux_out, mem_to_reg_mux_out;
    wire [4:0] write_reg;
    wire [3:0] alu_control;
    wire [1:0] alu_op;
    wire reg_dst, alu_src, mem_to_reg, reg_write, mem_read, mem_write, branch, jump, zero_flag;
    
    // Instantiate MIPS Processor
    MIPS_Processor uut (
        .clk(clk),
        .reset(reset),
        .pc_in(pc_in)
    );

    // Clock Generation
    always #10 clk = ~clk; // 20ns clock period
    
    initial begin
        // Initialize Inputs
        clk = 0;
        reset = 1;
        pc_in = 32'h00000000;
        #15 reset = 0; // Deassert reset after 15ns
        
        // Monitor outputs for debugging
        $monitor("Time=%0t | PC=%h | Instr=%h | Reg1=%h | Reg2=%h | ALURes=%h | MemData=%h | WriteData=%h | ZeroFlag=%b", 
                 $time, uut.PC.address_out, uut.IM.instruction, uut.RF.read_data1, uut.RF.read_data2, 
                 uut.ALU.ALUResult, uut.DM.read_data, uut.RF.write_data, uut.ALU.Zero_Flag);
                 
        #200 $finish; // Stop simulation after 200ns
    end
endmodule
